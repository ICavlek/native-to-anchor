// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod serum {
    use super::*;

    pub fn initialize_market(
        ctx: Context<InitializeMarket>,
        coin_lot_size: u64,
        pc_lot_size: u64,
        fee_rate_bps: u16,
        vault_signer_nonce: u64,
        pc_dust_threshold: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn new_order(
        ctx: Context<NewOrder>,
        side: Side,
        #[cfg_attr(
            test,
            proptest(
                strategy = "(1u64..=std::u64::MAX).prop_map(|x| NonZeroU64::new(x).unwrap())"
            )
        )]
        limit_price: NonZeroU64,
        #[cfg_attr(
            test,
            proptest(
                strategy = "(1u64..=std::u64::MAX).prop_map(|x| NonZeroU64::new(x).unwrap())"
            )
        )]
        max_qty: NonZeroU64,
        order_type: OrderType,
        client_id: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn match_orders(ctx: Context<MatchOrders>, arg: u16) -> Result<()> {
        Ok(())
    }

    pub fn consume_events(ctx: Context<ConsumeEvents>, arg: u16) -> Result<()> {
        Ok(())
    }

    pub fn cancel_order(ctx: Context<CancelOrder>, side: Side, order_id: u128) -> Result<()> {
        Ok(())
    }

    pub fn settle_funds(ctx: Context<SettleFunds>) -> Result<()> {
        Ok(())
    }

    pub fn cancel_order_by_client_order_id(
        ctx: Context<CancelOrderByClientOrderId>,
        arg: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn disable_market(ctx: Context<DisableMarket>) -> Result<()> {
        Ok(())
    }

    pub fn sweep_fees(ctx: Context<SweepFees>) -> Result<()> {
        Ok(())
    }

    pub fn close_open_orders(ctx: Context<CloseOpenOrders>) -> Result<()> {
        Ok(())
    }

    pub fn init_open_orders(ctx: Context<InitOpenOrders>) -> Result<()> {
        Ok(())
    }

    pub fn prune(ctx: Context<Prune>, arg: u16) -> Result<()> {
        Ok(())
    }

    pub fn consume_events_permissioned(
        ctx: Context<ConsumeEventsPermissioned>,
        arg: u16,
    ) -> Result<()> {
        Ok(())
    }

    pub fn cancel_orders_by_client_order_ids(
        ctx: Context<CancelOrdersByClientOrderIds>,
        arg: [u64; 8],
    ) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeMarket<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    req_q: AccountInfo<'info>,
    #[account(mut)]
    event_q: AccountInfo<'info>,
    #[account(mut)]
    coin_vault: AccountInfo<'info>,
    #[account(mut)]
    pc_vault: AccountInfo<'info>,
    coin_mint: AccountInfo<'info>,
    pc_mint: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
    auth: AccountInfo<'info>,
    prune_auth: AccountInfo<'info>,
    consume_events_auth: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct NewOrder<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    #[account(mut)]
    request_queue: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    market_bids: AccountInfo<'info>,
    #[account(mut)]
    market_asks: AccountInfo<'info>,
    #[account(mut)]
    order_payer: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    coin_vault: AccountInfo<'info>,
    #[account(mut)]
    pc_vault: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    rent_sysvar: AccountInfo<'info>,
    //key: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct MatchOrders<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    request_queue: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    coin_fee_receivable_account: AccountInfo<'info>,
    #[account(mut)]
    pc_fee_receivable_account: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ConsumeEvents<'info> {
    //#[account(mut)]
    //key: AccountInfo<'info>,
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    coin_fee_receivable_account: AccountInfo<'info>,
    #[account(mut)]
    pc_fee_receivable_account: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelOrder<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    market_bids: AccountInfo<'info>,
    #[account(mut)]
    market_asks: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SettleFunds<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    coin_vault: AccountInfo<'info>,
    #[account(mut)]
    pc_vault: AccountInfo<'info>,
    #[account(mut)]
    coin_wallet: AccountInfo<'info>,
    #[account(mut)]
    pc_wallet: AccountInfo<'info>,
    vault_signer: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    //#[account(mut)]
    //key: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelOrderByClientOrderId<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    market_bids: AccountInfo<'info>,
    #[account(mut)]
    market_asks: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct DisableMarket<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    disable_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct SweepFees<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    pc_vault: AccountInfo<'info>,
    fee_sweeping_authority: Signer<'info>,
    #[account(mut)]
    fee_receivable_account: AccountInfo<'info>,
    vault_signer: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct CloseOpenOrders<'info> {
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    destination: AccountInfo<'info>,
    market: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct InitOpenOrders<'info> {
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    owner: Signer<'info>,
    market: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
    //market_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct Prune<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    prune_authority: Signer<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    open_orders_owner: AccountInfo<'info>,
    #[account(mut)]
    event_q: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ConsumeEventsPermissioned<'info> {
    //#[account(mut)]
    //key: AccountInfo<'info>,
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    consume_events_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct CancelOrdersByClientOrderIds<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    market_bids: AccountInfo<'info>,
    #[account(mut)]
    market_asks: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
}
