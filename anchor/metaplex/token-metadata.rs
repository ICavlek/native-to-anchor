// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod token_metadata {
    use super::*;

    pub fn create_metadata_accounts(
        ctx: Context<CreateMetadataAccounts>,
        data: Data,
        is_mutable: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn update_metadata_accounts(
        ctx: Context<UpdateMetadataAccounts>,
        data: Option<Data>,
        update_authority: Option<Pubkey>,
        primary_sale_happened: Option<bool>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_create_master_edition(
        ctx: Context<DeprecatedCreateMasterEdition>,
        max_supply: Option<u64>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_mint_new_edition_from_master_edition_via_printing_token(
        ctx: Context<DeprecatedMintNewEditionFromMasterEditionViaPrintingToken>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn update_primary_sale_happened_via_token(
        ctx: Context<UpdatePrimarySaleHappenedViaToken>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_set_reservation_list(
        ctx: Context<DeprecatedSetReservationList>,
        arg: SetReservationListArgs,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_create_reservation_list(
        ctx: Context<DeprecatedCreateReservationList>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn sign_metadata(ctx: Context<SignMetadata>) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_mint_printing_tokens_via_token(
        ctx: Context<DeprecatedMintPrintingTokensViaToken>,
        arg: MintPrintingTokensViaTokenArgs,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deprecated_mint_printing_tokens(
        ctx: Context<DeprecatedMintPrintingTokens>,
        arg: MintPrintingTokensViaTokenArgs,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_master_edition(
        ctx: Context<CreateMasterEdition>,
        max_supply: Option<u64>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn mint_new_edition_from_master_edition_via_token(
        ctx: Context<MintNewEditionFromMasterEditionViaToken>,
        edition: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn convert_master_edition_v1_to_v2(ctx: Context<ConvertMasterEditionV1ToV2>) -> Result<()> {
        Ok(())
    }

    pub fn mint_new_edition_from_master_edition_via_token(
        ctx: Context<MintNewEditionFromMasterEditionViaToken>,
        edition: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn puff_metadata_account(ctx: Context<PuffMetadataAccount>) -> Result<()> {
        Ok(())
    }

    pub fn update_metadata_accounts_v2(
        ctx: Context<UpdateMetadataAccountsV2>,
        data: Option<DataV2>,
        update_authority: Option<Pubkey>,
        primary_sale_happened: Option<bool>,
        is_mutable: Option<bool>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_metadata_accounts_v2(
        ctx: Context<CreateMetadataAccountsV2>,
        data: DataV2,
        is_mutable: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_master_edition_v3(
        ctx: Context<CreateMasterEditionV3>,
        max_supply: Option<u64>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn verify_collection(ctx: Context<VerifyCollection>) -> Result<()> {
        Ok(())
    }

    pub fn utilize(ctx: Context<Utilize>, number_of_uses: u64) -> Result<()> {
        Ok(())
    }

    pub fn approve_use_authority(
        ctx: Context<ApproveUseAuthority>,
        number_of_uses: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn revoke_use_authority(ctx: Context<RevokeUseAuthority>) -> Result<()> {
        Ok(())
    }

    pub fn unverify_collection(ctx: Context<UnverifyCollection>) -> Result<()> {
        Ok(())
    }

    pub fn approve_collection_authority(ctx: Context<ApproveCollectionAuthority>) -> Result<()> {
        Ok(())
    }

    pub fn revoke_collection_authority(ctx: Context<RevokeCollectionAuthority>) -> Result<()> {
        Ok(())
    }

    pub fn set_and_verify_collection(ctx: Context<SetAndVerifyCollection>) -> Result<()> {
        Ok(())
    }

    pub fn freeze_delegated_account(ctx: Context<FreezeDelegatedAccount>) -> Result<()> {
        Ok(())
    }

    pub fn thaw_delegated_account(ctx: Context<ThawDelegatedAccount>) -> Result<()> {
        Ok(())
    }

    pub fn remove_creator_verification(ctx: Context<RemoveCreatorVerification>) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct CreateMetadataAccounts<'info> {
    #[account(mut)]
    metadata_account: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    update_authority: Signer<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct UpdateMetadataAccounts<'info> {
    #[account(mut)]
    metadata_account: AccountInfo<'info>,
    update_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct DeprecatedCreateMasterEdition<'info> {
    #[account(mut)]
    edition: AccountInfo<'info>,
    #[account(mut)]
    mint: AccountInfo<'info>,
    #[account(mut)]
    printing_mint: AccountInfo<'info>,
    #[account(mut)]
    one_time_printing_authorization_mint: AccountInfo<'info>,
    update_authority: Signer<'info>,
    printing_mint_authority: Signer<'info>,
    mint_authority: Signer<'info>,
    metadata: AccountInfo<'info>,
    payer: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
    //auth: Signer<'info>,
}

#[derive(Accounts)]
pub struct DeprecatedMintNewEditionFromMasterEditionViaPrintingToken<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    #[account(mut)]
    edition: AccountInfo<'info>,
    #[account(mut)]
    master_edition: AccountInfo<'info>,
    #[account(mut)]
    mint: AccountInfo<'info>,
    mint_authority: Signer<'info>,
    #[account(mut)]
    printing_mint: AccountInfo<'info>,
    #[account(mut)]
    master_token_account: AccountInfo<'info>,
    burn_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    master_update_authority: Signer<'info>,
    master_metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
    //list: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct UpdatePrimarySaleHappenedViaToken<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    owner: Signer<'info>,
    token: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct DeprecatedSetReservationList<'info> {
    #[account(mut)]
    master_edition: AccountInfo<'info>,
    #[account(mut)]
    reservation_list: AccountInfo<'info>,
    resource: Signer<'info>,
}

#[derive(Accounts)]
pub struct DeprecatedCreateReservationList<'info> {
    #[account(mut)]
    reservation_list: AccountInfo<'info>,
    payer: Signer<'info>,
    update_authority: Signer<'info>,
    master_edition: AccountInfo<'info>,
    resource: AccountInfo<'info>,
    metadata: AccountInfo<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct SignMetadata<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    creator: Signer<'info>,
}

#[derive(Accounts)]
pub struct DeprecatedMintPrintingTokensViaToken<'info> {
    #[account(mut)]
    destination: AccountInfo<'info>,
    #[account(mut)]
    token: AccountInfo<'info>,
    #[account(mut)]
    one_time_printing_authorization_mint: AccountInfo<'info>,
    #[account(mut)]
    printing_mint: AccountInfo<'info>,
    burn_authority: Signer<'info>,
    metadata: AccountInfo<'info>,
    master_edition: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct DeprecatedMintPrintingTokens<'info> {
    #[account(mut)]
    destination: AccountInfo<'info>,
    #[account(mut)]
    printing_mint: AccountInfo<'info>,
    update_authority: Signer<'info>,
    metadata: AccountInfo<'info>,
    master_edition: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct CreateMasterEdition<'info> {
    #[account(mut)]
    edition: AccountInfo<'info>,
    #[account(mut)]
    mint: AccountInfo<'info>,
    update_authority: Signer<'info>,
    mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct MintNewEditionFromMasterEditionViaToken<'info> {
    #[account(mut)]
    new_metadata: AccountInfo<'info>,
    #[account(mut)]
    new_edition: AccountInfo<'info>,
    #[account(mut)]
    master_edition: AccountInfo<'info>,
    #[account(mut)]
    new_mint: AccountInfo<'info>,
    #[account(mut)]
    edition_mark_pda: AccountInfo<'info>,
    new_mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    token_account_owner: Signer<'info>,
    token_account: AccountInfo<'info>,
    new_metadata_update_authority: AccountInfo<'info>,
    metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct ConvertMasterEditionV1ToV2<'info> {
    #[account(mut)]
    master_edition: AccountInfo<'info>,
    #[account(mut)]
    one_time_auth: AccountInfo<'info>,
    #[account(mut)]
    printing_mint: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct MintNewEditionFromMasterEditionViaToken<'info> {
    #[account(mut)]
    new_metadata: AccountInfo<'info>,
    #[account(mut)]
    new_edition: AccountInfo<'info>,
    #[account(mut)]
    master_edition: AccountInfo<'info>,
    #[account(mut)]
    new_mint: AccountInfo<'info>,
    #[account(mut)]
    edition_mark_pda: AccountInfo<'info>,
    new_mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    token_account_owner: Signer<'info>,
    token_account: AccountInfo<'info>,
    new_metadata_update_authority: AccountInfo<'info>,
    metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct PuffMetadataAccount<'info> {
    #[account(mut)]
    metadata_account: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct UpdateMetadataAccountsV2<'info> {
    #[account(mut)]
    metadata_account: AccountInfo<'info>,
    update_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateMetadataAccountsV2<'info> {
    #[account(mut)]
    metadata_account: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    update_authority: Signer<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct CreateMasterEditionV3<'info> {
    #[account(mut)]
    edition: AccountInfo<'info>,
    #[account(mut)]
    mint: AccountInfo<'info>,
    update_authority: Signer<'info>,
    mint_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    #[account(mut)]
    metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct VerifyCollection<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    #[account(mut)]
    collection_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    collection_mint: AccountInfo<'info>,
    collection: AccountInfo<'info>,
    collection_master_edition_account: AccountInfo<'info>,
    //collection_authority_record: Signer<'info>,
}

#[derive(Accounts)]
pub struct Utilize<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    #[account(mut)]
    token_account: AccountInfo<'info>,
    #[account(mut)]
    mint: AccountInfo<'info>,
    #[account(mut)]
    use_authority: Signer<'info>,
    owner: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    //spl_associated_token_account::id): AccountInfo<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
    //use_authority_record_pda: AccountInfo<'info>,
    //burner: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ApproveUseAuthority<'info> {
    #[account(mut)]
    use_authority_record: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    user: AccountInfo<'info>,
    #[account(mut)]
    owner_token_account: AccountInfo<'info>,
    metadata: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    burner: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct RevokeUseAuthority<'info> {
    #[account(mut)]
    use_authority_record: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    user: AccountInfo<'info>,
    #[account(mut)]
    owner_token_account: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    metadata: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct UnverifyCollection<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    #[account(mut)]
    collection_authority: Signer<'info>,
    collection_mint: AccountInfo<'info>,
    collection: AccountInfo<'info>,
    collection_master_edition_account: AccountInfo<'info>,
    //collection_authority_record: Signer<'info>,
}

#[derive(Accounts)]
pub struct ApproveCollectionAuthority<'info> {
    #[account(mut)]
    collection_authority_record: AccountInfo<'info>,
    new_collection_authority: AccountInfo<'info>,
    #[account(mut)]
    update_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    metadata: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct RevokeCollectionAuthority<'info> {
    #[account(mut)]
    collection_authority_record: AccountInfo<'info>,
    delegate_authority: AccountInfo<'info>,
    #[account(mut)]
    revoke_authority: Signer<'info>,
    metadata: AccountInfo<'info>,
    mint: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SetAndVerifyCollection<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    #[account(mut)]
    collection_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    update_authority: AccountInfo<'info>,
    collection_mint: AccountInfo<'info>,
    collection: AccountInfo<'info>,
    collection_master_edition_account: AccountInfo<'info>,
    //collection_authority_record: Signer<'info>,
}

#[derive(Accounts)]
pub struct FreezeDelegatedAccount<'info> {
    #[account(mut)]
    delegate: Signer<'info>,
    #[account(mut)]
    token_account: AccountInfo<'info>,
    edition: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct ThawDelegatedAccount<'info> {
    #[account(mut)]
    delegate: Signer<'info>,
    #[account(mut)]
    token_account: AccountInfo<'info>,
    edition: AccountInfo<'info>,
    mint: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct RemoveCreatorVerification<'info> {
    #[account(mut)]
    metadata: AccountInfo<'info>,
    creator: Signer<'info>,
}
