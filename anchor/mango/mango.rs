// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod mango {
    use super::*;

    pub fn init_mango_group(
        ctx: Context<InitMangoGroup>,
        signer_nonce: u64,
        valid_interval: u64,
        quote_optimal_util: I80F48,
        quote_optimal_rate: I80F48,
        quote_max_rate: I80F48,
    ) -> Result<()> {
        Ok(())
    }

    pub fn init_mango_account(ctx: Context<InitMangoAccount>) -> Result<()> {
        Ok(())
    }

    pub fn deposit(ctx: Context<Deposit>, quantity: u64) -> Result<()> {
        Ok(())
    }

    pub fn withdraw(ctx: Context<Withdraw>, quantity: u64, allow_borrow: bool) -> Result<()> {
        Ok(())
    }

    pub fn add_spot_market(
        ctx: Context<AddSpotMarket>,
        maint_leverage: I80F48,
        init_leverage: I80F48,
        liquidation_fee: I80F48,
        optimal_util: I80F48,
        optimal_rate: I80F48,
        max_rate: I80F48,
    ) -> Result<()> {
        Ok(())
    }

    pub fn borrow(ctx: Context<Borrow>, quantity: u64) -> Result<()> {
        Ok(())
    }

    pub fn cache_prices(ctx: Context<CachePrices>) -> Result<()> {
        Ok(())
    }

    pub fn cache_root_banks(ctx: Context<CacheRootBanks>) -> Result<()> {
        Ok(())
    }

    pub fn place_spot_order(
        ctx: Context<PlaceSpotOrder>,
        order: serum_dex::instruction::NewOrderInstructionV3,
    ) -> Result<()> {
        Ok(())
    }

    pub fn add_oracle(ctx: Context<AddOracle>) -> Result<()> {
        Ok(())
    }

    pub fn add_perp_market(
        ctx: Context<AddPerpMarket>,
        maint_leverage: I80F48,
        init_leverage: I80F48,
        liquidation_fee: I80F48,
        maker_fee: I80F48,
        taker_fee: I80F48,
        base_lot_size: i64,
        quote_lot_size: i64,
        rate: I80F48,
        max_depth_bps: I80F48,
        target_period_length: u64,
        mngo_per_period: u64,
        exp: u8,
    ) -> Result<()> {
        Ok(())
    }

    pub fn place_perp_order(
        ctx: Context<PlacePerpOrder>,
        price: i64,
        quantity: i64,
        client_order_id: u64,
        side: Side,
        order_type: OrderType,
        reduce_only: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn cancel_perp_order_by_client_id(
        ctx: Context<CancelPerpOrderByClientId>,
        client_order_id: u64,
        invalid_id_ok: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn cancel_perp_order(
        ctx: Context<CancelPerpOrder>,
        order_id: i128,
        invalid_id_ok: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn consume_events(ctx: Context<ConsumeEvents>, limit: usize) -> Result<()> {
        Ok(())
    }

    pub fn cache_perp_markets(ctx: Context<CachePerpMarkets>) -> Result<()> {
        Ok(())
    }

    pub fn update_funding(ctx: Context<UpdateFunding>) -> Result<()> {
        Ok(())
    }

    pub fn set_oracle(ctx: Context<SetOracle>, price: I80F48) -> Result<()> {
        Ok(())
    }

    pub fn settle_funds(ctx: Context<SettleFunds>) -> Result<()> {
        Ok(())
    }

    pub fn cancel_spot_order(
        ctx: Context<CancelSpotOrder>,
        side: Side,
        order_id: u128,
    ) -> Result<()> {
        Ok(())
    }

    pub fn update_root_bank(ctx: Context<UpdateRootBank>) -> Result<()> {
        Ok(())
    }

    pub fn settle_pnl(ctx: Context<SettlePnl>, market_index: usize) -> Result<()> {
        Ok(())
    }

    pub fn force_cancel_spot_orders(ctx: Context<ForceCancelSpotOrders>, limit: u8) -> Result<()> {
        Ok(())
    }

    pub fn force_cancel_perp_orders(ctx: Context<ForceCancelPerpOrders>, limit: u8) -> Result<()> {
        Ok(())
    }

    pub fn liquidate_token_and_token(
        ctx: Context<LiquidateTokenAndToken>,
        max_liab_transfer: I80F48,
    ) -> Result<()> {
        Ok(())
    }

    pub fn liquidate_token_and_perp(
        ctx: Context<LiquidateTokenAndPerp>,
        asset_type: AssetType,
        asset_index: usize,
        liab_type: AssetType,
        liab_index: usize,
        max_liab_transfer: I80F48,
    ) -> Result<()> {
        Ok(())
    }

    pub fn liquidate_perp_market(
        ctx: Context<LiquidatePerpMarket>,
        base_transfer_request: i64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn init_spot_open_orders(ctx: Context<InitSpotOpenOrders>) -> Result<()> {
        Ok(())
    }

    pub fn cancel_all_perp_orders(ctx: Context<CancelAllPerpOrders>, limit: u8) -> Result<()> {
        Ok(())
    }

    pub fn place_spot_order2(
        ctx: Context<PlaceSpotOrder2>,
        order: serum_dex::instruction::NewOrderInstructionV3,
    ) -> Result<()> {
        Ok(())
    }

    pub fn init_advanced_orders(ctx: Context<InitAdvancedOrders>) -> Result<()> {
        Ok(())
    }

    pub fn add_perp_trigger_order(
        ctx: Context<AddPerpTriggerOrder>,
        order_type: OrderType,
        side: Side,
        trigger_condition: TriggerCondition,
        reduce_only: bool,
        client_order_id: u64,
        price: i64,
        quantity: i64,
        trigger_price: I80F48,
    ) -> Result<()> {
        Ok(())
    }

    pub fn remove_advanced_order(ctx: Context<RemoveAdvancedOrder>, order_index: u8) -> Result<()> {
        Ok(())
    }

    pub fn execute_perp_trigger_order(
        ctx: Context<ExecutePerpTriggerOrder>,
        order_index: u8,
    ) -> Result<()> {
        Ok(())
    }

    pub fn close_mango_account(ctx: Context<CloseMangoAccount>) -> Result<()> {
        Ok(())
    }

    pub fn close_spot_open_orders(ctx: Context<CloseSpotOpenOrders>) -> Result<()> {
        Ok(())
    }

    pub fn close_advanced_orders(ctx: Context<CloseAdvancedOrders>) -> Result<()> {
        Ok(())
    }

    pub fn create_mango_account(ctx: Context<CreateMangoAccount>, account_num: u64) -> Result<()> {
        Ok(())
    }

    pub fn upgrade_mango_account_v0_v1(ctx: Context<UpgradeMangoAccountV0V1>) -> Result<()> {
        Ok(())
    }

    pub fn cancel_perp_orders_side(
        ctx: Context<CancelPerpOrdersSide>,
        side: Side,
        limit: u8,
    ) -> Result<()> {
        Ok(())
    }

    pub fn set_delegate(ctx: Context<SetDelegate>) -> Result<()> {
        Ok(())
    }

    pub fn change_spot_market_params(
        ctx: Context<ChangeSpotMarketParams>,
        maint_leverage: Option<I80F48>,
        init_leverage: Option<I80F48>,
        liquidation_fee: Option<I80F48>,
        optimal_util: Option<I80F48>,
        optimal_rate: Option<I80F48>,
        max_rate: Option<I80F48>,
        version: Option<u8>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_spot_open_orders(ctx: Context<CreateSpotOpenOrders>) -> Result<()> {
        Ok(())
    }

    pub fn place_perp_order2(
        ctx: Context<PlacePerpOrder2>,
        price: i64,
        max_base_quantity: i64,
        max_quote_quantity: i64,
        client_order_id: u64,
        expiry_timestamp: u64,
        side: Side,
        order_type: OrderType,
        reduce_only: bool,
        limit: u8,
    ) -> Result<()> {
        Ok(())
    }

    pub fn cancel_all_spot_orders(ctx: Context<CancelAllSpotOrders>, limit: u8) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitMangoGroup<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    admin: Signer<'info>,
    quote_mint: AccountInfo<'info>,
    quote_vault: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_root_bank: AccountInfo<'info>,
    insurance_vault: AccountInfo<'info>,
    msrm_vault: AccountInfo<'info>,
    fees_vault: AccountInfo<'info>,
    #[account(mut)]
    mango_cache_ai: AccountInfo<'info>,
    dex_program: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct InitMangoAccount<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct Deposit<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    root_bank: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
    #[account(mut)]
    vault: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    #[account(mut)]
    owner_token_account: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct Withdraw<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    root_bank: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
    #[account(mut)]
    vault: AccountInfo<'info>,
    #[account(mut)]
    token_account: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct AddSpotMarket<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    oracle: AccountInfo<'info>,
    spot_market: AccountInfo<'info>,
    dex_program: AccountInfo<'info>,
    token_mint: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
    vault: AccountInfo<'info>,
    #[account(mut)]
    root_bank: AccountInfo<'info>,
    admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct Borrow<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    root_bank: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
    //#[account(mut)]
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CachePrices<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CacheRootBanks<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct PlaceSpotOrder<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    dex_request_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_event_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_base: AccountInfo<'info>,
    #[account(mut)]
    dex_quote: AccountInfo<'info>,
    base_root_bank: AccountInfo<'info>,
    #[account(mut)]
    base_node_bank: AccountInfo<'info>,
    #[account(mut)]
    base_vault: AccountInfo<'info>,
    quote_root_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_vault: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    signer: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
    dex_signer: AccountInfo<'info>,
    msrm_or_srm_vault: AccountInfo<'info>,
    //#[account(mut)]
    //pk: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct AddOracle<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    oracle: AccountInfo<'info>,
    admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct AddPerpMarket<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    oracle: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    mngo_vault: AccountInfo<'info>,
    admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct PlacePerpOrder<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
    //#[account(mut)]
    //referrer_mango_account: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelPerpOrderByClientId<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelPerpOrder<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ConsumeEvents<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    //#[account(mut)]
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CachePerpMarkets<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct UpdateFunding<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    bids: AccountInfo<'info>,
    asks: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SetOracle<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    oracle: AccountInfo<'info>,
    admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct SettleFunds<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    #[account(mut)]
    dex_base: AccountInfo<'info>,
    #[account(mut)]
    dex_quote: AccountInfo<'info>,
    base_root_bank: AccountInfo<'info>,
    #[account(mut)]
    base_node_bank: AccountInfo<'info>,
    quote_root_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    base_vault: AccountInfo<'info>,
    #[account(mut)]
    quote_vault: AccountInfo<'info>,
    dex_signer: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct CancelSpotOrder<'info> {
    #[account(mut)]
    market: AccountInfo<'info>,
    #[account(mut)]
    market_bids: AccountInfo<'info>,
    #[account(mut)]
    market_asks: AccountInfo<'info>,
    #[account(mut)]
    open_orders_account: AccountInfo<'info>,
    open_orders_account_owner: Signer<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct UpdateRootBank<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    root_bank: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SettlePnl<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account_a: AccountInfo<'info>,
    #[account(mut)]
    mango_account_b: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    root_bank: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ForceCancelSpotOrders<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    liqee_mango_account: AccountInfo<'info>,
    base_root_bank: AccountInfo<'info>,
    #[account(mut)]
    base_node_bank: AccountInfo<'info>,
    #[account(mut)]
    base_vault: AccountInfo<'info>,
    quote_root_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_vault: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    signer: Signer<'info>,
    #[account(mut)]
    dex_event_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_base: AccountInfo<'info>,
    #[account(mut)]
    dex_quote: AccountInfo<'info>,
    dex_signer: AccountInfo<'info>,
    dex_prog: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ForceCancelPerpOrders<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    liqee_mango_account: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct LiquidateTokenAndToken<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    liqee_mango_account: AccountInfo<'info>,
    #[account(mut)]
    liqor_mango_account: AccountInfo<'info>,
    liqor: Signer<'info>,
    asset_root_bank: AccountInfo<'info>,
    #[account(mut)]
    asset_node_bank: AccountInfo<'info>,
    liab_root_bank: AccountInfo<'info>,
    #[account(mut)]
    liab_node_bank: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct LiquidateTokenAndPerp<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    liqee_mango_account: AccountInfo<'info>,
    #[account(mut)]
    liqor_mango_account: AccountInfo<'info>,
    liqor: Signer<'info>,
    root_bank: AccountInfo<'info>,
    #[account(mut)]
    node_bank: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct LiquidatePerpMarket<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    liqee_mango_account: AccountInfo<'info>,
    #[account(mut)]
    liqor_mango_account: AccountInfo<'info>,
    liqor: Signer<'info>,
    //pk: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct InitSpotOpenOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    spot_market: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct CancelAllPerpOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct PlaceSpotOrder2<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    dex_request_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_event_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_base: AccountInfo<'info>,
    #[account(mut)]
    dex_quote: AccountInfo<'info>,
    base_root_bank: AccountInfo<'info>,
    #[account(mut)]
    base_node_bank: AccountInfo<'info>,
    #[account(mut)]
    base_vault: AccountInfo<'info>,
    quote_root_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_vault: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    signer: AccountInfo<'info>,
    dex_signer: AccountInfo<'info>,
    msrm_or_srm_vault: AccountInfo<'info>,
    //#[account(mut)]
    //pk: AccountInfo<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct InitAdvancedOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    #[account(mut)]
    advanced_orders: AccountInfo<'info>,
    system_prog: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct AddPerpTriggerOrder<'info> {
    mango_group: AccountInfo<'info>,
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    #[account(mut)]
    advanced_orders: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    perp_market: AccountInfo<'info>,
    system_prog: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct RemoveAdvancedOrder<'info> {
    mango_group: AccountInfo<'info>,
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    #[account(mut)]
    advanced_orders: AccountInfo<'info>,
    system_prog: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ExecutePerpTriggerOrder<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    advanced_orders: AccountInfo<'info>,
    #[account(mut)]
    agent: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CloseMangoAccount<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct CloseSpotOpenOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    spot_market: AccountInfo<'info>,
    signer: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CloseAdvancedOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    #[account(mut)]
    owner: Signer<'info>,
    #[account(mut)]
    advanced_orders: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CreateMangoAccount<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    system_prog: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
}

#[derive(Accounts)]
pub struct UpgradeMangoAccountV0V1<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct CancelPerpOrdersSide<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SetDelegate<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    delegate: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ChangeSpotMarketParams<'info> {
    #[account(mut)]
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    root_bank: AccountInfo<'info>,
    admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateSpotOpenOrders<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    dex_prog: AccountInfo<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    spot_market: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    system_program: Program<'info, System>,
    #[account(mut)]
    payer: Signer<'info>,
}

#[derive(Accounts)]
pub struct PlacePerpOrder2<'info> {
    mango_group: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    perp_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    event_queue: AccountInfo<'info>,
    #[account(mut)]
    referrer_mango_account: Signer<'info>,
    //pk: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelAllSpotOrders<'info> {
    mango_group: AccountInfo<'info>,
    mango_cache: AccountInfo<'info>,
    #[account(mut)]
    mango_account: AccountInfo<'info>,
    owner: Signer<'info>,
    base_root_bank: AccountInfo<'info>,
    #[account(mut)]
    base_node_bank: AccountInfo<'info>,
    #[account(mut)]
    base_vault: AccountInfo<'info>,
    quote_root_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_node_bank: AccountInfo<'info>,
    #[account(mut)]
    quote_vault: AccountInfo<'info>,
    #[account(mut)]
    spot_market: AccountInfo<'info>,
    #[account(mut)]
    bids: AccountInfo<'info>,
    #[account(mut)]
    asks: AccountInfo<'info>,
    #[account(mut)]
    open_orders: AccountInfo<'info>,
    signer: AccountInfo<'info>,
    #[account(mut)]
    dex_event_queue: AccountInfo<'info>,
    #[account(mut)]
    dex_base: AccountInfo<'info>,
    #[account(mut)]
    dex_quote: AccountInfo<'info>,
    dex_signer: AccountInfo<'info>,
    dex_prog: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}
