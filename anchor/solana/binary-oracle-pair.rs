// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod binary_oracle_pair {
    use super::*;

    pub fn init_pool(
        ctx: Context<InitPool>,
        mint_end_slot: Slot,
        decide_end_slot: Slot,
        bump_seed: u8,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deposit(ctx: Context<Deposit>, arg: u64) -> Result<()> {
        Ok(())
    }

    pub fn withdraw(ctx: Context<Withdraw>, arg: u64) -> Result<()> {
        Ok(())
    }

    pub fn decide(ctx: Context<Decide>, arg: bool) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitPool<'info> {
    #[account(mut)]
    pool: AccountInfo<'info>,
    authority: AccountInfo<'info>,
    decider: AccountInfo<'info>,
    deposit_token_mint: AccountInfo<'info>,
    #[account(mut)]
    deposit_account: AccountInfo<'info>,
    #[account(mut)]
    token_pass_mint: AccountInfo<'info>,
    #[account(mut)]
    token_fail_mint: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct Deposit<'info> {
    pool: AccountInfo<'info>,
    authority: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    #[account(mut)]
    user_token_account: AccountInfo<'info>,
    #[account(mut)]
    pool_deposit_token_account: AccountInfo<'info>,
    #[account(mut)]
    token_pass_mint: AccountInfo<'info>,
    #[account(mut)]
    token_fail_mint: AccountInfo<'info>,
    #[account(mut)]
    token_pass_destination_account: AccountInfo<'info>,
    #[account(mut)]
    token_fail_destination_account: AccountInfo<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct Withdraw<'info> {
    pool: AccountInfo<'info>,
    authority: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    #[account(mut)]
    pool_deposit_token_account: AccountInfo<'info>,
    #[account(mut)]
    token_pass_user_account: AccountInfo<'info>,
    #[account(mut)]
    token_fail_user_account: AccountInfo<'info>,
    #[account(mut)]
    token_pass_mint: AccountInfo<'info>,
    #[account(mut)]
    token_fail_mint: AccountInfo<'info>,
    #[account(mut)]
    user_token_destination_account: AccountInfo<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct Decide<'info> {
    #[account(mut)]
    pool: AccountInfo<'info>,
    decider: Signer<'info>,
    clock: Sysvar<'info, Clock>,
}
