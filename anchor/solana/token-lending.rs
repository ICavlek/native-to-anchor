// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod token_lending {
    use super::*;

    pub fn init_lending_market(
        ctx: Context<InitLendingMarket>,
        owner: Pubkey,
        quote_currency: [u8; 32],
    ) -> Result<()> {
        Ok(())
    }

    pub fn set_lending_market_owner(
        ctx: Context<SetLendingMarketOwner>,
        new_owner: Pubkey,
    ) -> Result<()> {
        Ok(())
    }

    pub fn init_reserve(
        ctx: Context<InitReserve>,
        liquidity_amount: u64,
        config: ReserveConfig,
    ) -> Result<()> {
        Ok(())
    }

    pub fn refresh_reserve(ctx: Context<RefreshReserve>) -> Result<()> {
        Ok(())
    }

    pub fn deposit_reserve_liquidity(
        ctx: Context<DepositReserveLiquidity>,
        liquidity_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn redeem_reserve_collateral(
        ctx: Context<RedeemReserveCollateral>,
        collateral_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn init_obligation(ctx: Context<InitObligation>) -> Result<()> {
        Ok(())
    }

    pub fn refresh_obligation(ctx: Context<RefreshObligation>) -> Result<()> {
        Ok(())
    }

    pub fn deposit_obligation_collateral(
        ctx: Context<DepositObligationCollateral>,
        collateral_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn withdraw_obligation_collateral(
        ctx: Context<WithdrawObligationCollateral>,
        collateral_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn borrow_obligation_liquidity(
        ctx: Context<BorrowObligationLiquidity>,
        liquidity_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn repay_obligation_liquidity(
        ctx: Context<RepayObligationLiquidity>,
        liquidity_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn liquidate_obligation(
        ctx: Context<LiquidateObligation>,
        liquidity_amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn flash_loan(ctx: Context<FlashLoan>, amount: u64) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitLendingMarket<'info> {
    #[account(mut)]
    lending_market: AccountInfo<'info>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
    oracle_program: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SetLendingMarketOwner<'info> {
    #[account(mut)]
    lending_market: AccountInfo<'info>,
    lending_market_owner: Signer<'info>,
}

#[derive(Accounts)]
pub struct InitReserve<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_collateral: AccountInfo<'info>,
    #[account(mut)]
    reserve: AccountInfo<'info>,
    reserve_liquidity_mint: AccountInfo<'info>,
    #[account(mut)]
    reserve_liquidity_supply: AccountInfo<'info>,
    #[account(mut)]
    reserve_liquidity_fee_receiver: AccountInfo<'info>,
    #[account(mut)]
    reserve_collateral_mint: AccountInfo<'info>,
    #[account(mut)]
    reserve_collateral_supply: AccountInfo<'info>,
    pyth_product: AccountInfo<'info>,
    pyth_price: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    lending_market_owner: Signer<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct RefreshReserve<'info> {
    #[account(mut)]
    reserve: AccountInfo<'info>,
    reserve_liquidity_oracle: AccountInfo<'info>,
    clock: Sysvar<'info, Clock>,
}

#[derive(Accounts)]
pub struct DepositReserveLiquidity<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_collateral: AccountInfo<'info>,
    #[account(mut)]
    reserve: AccountInfo<'info>,
    #[account(mut)]
    reserve_liquidity_supply: AccountInfo<'info>,
    #[account(mut)]
    reserve_collateral_mint: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct RedeemReserveCollateral<'info> {
    #[account(mut)]
    source_collateral: AccountInfo<'info>,
    #[account(mut)]
    destination_liquidity: AccountInfo<'info>,
    #[account(mut)]
    reserve: AccountInfo<'info>,
    #[account(mut)]
    reserve_collateral_mint: AccountInfo<'info>,
    #[account(mut)]
    reserve_liquidity_supply: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct InitObligation<'info> {
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    obligation_owner: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    rent: Sysvar<'info, Rent>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct RefreshObligation<'info> {
    #[account(mut)]
    obligation: AccountInfo<'info>,
    clock: Sysvar<'info, Clock>,
    //pubkey: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct DepositObligationCollateral<'info> {
    #[account(mut)]
    source_collateral: AccountInfo<'info>,
    #[account(mut)]
    destination_collateral: AccountInfo<'info>,
    deposit_reserve: AccountInfo<'info>,
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    obligation_owner: Signer<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct WithdrawObligationCollateral<'info> {
    #[account(mut)]
    source_collateral: AccountInfo<'info>,
    #[account(mut)]
    destination_collateral: AccountInfo<'info>,
    withdraw_reserve: AccountInfo<'info>,
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    obligation_owner: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct BorrowObligationLiquidity<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_liquidity: AccountInfo<'info>,
    #[account(mut)]
    borrow_reserve: AccountInfo<'info>,
    #[account(mut)]
    borrow_reserve_liquidity_fee_receiver: AccountInfo<'info>,
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    obligation_owner: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
    //#[account(mut)]
    //host_fee_receiver: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct RepayObligationLiquidity<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_liquidity: AccountInfo<'info>,
    #[account(mut)]
    repay_reserve: AccountInfo<'info>,
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct LiquidateObligation<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_collateral: AccountInfo<'info>,
    #[account(mut)]
    repay_reserve: AccountInfo<'info>,
    #[account(mut)]
    repay_reserve_liquidity_supply: AccountInfo<'info>,
    withdraw_reserve: AccountInfo<'info>,
    #[account(mut)]
    withdraw_reserve_collateral_supply: AccountInfo<'info>,
    #[account(mut)]
    obligation: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    user_transfer_authority: Signer<'info>,
    clock: Sysvar<'info, Clock>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct FlashLoan<'info> {
    #[account(mut)]
    source_liquidity: AccountInfo<'info>,
    #[account(mut)]
    destination_liquidity: AccountInfo<'info>,
    #[account(mut)]
    reserve: AccountInfo<'info>,
    #[account(mut)]
    reserve_liquidity_fee_receiver: AccountInfo<'info>,
    #[account(mut)]
    host_fee_receiver: AccountInfo<'info>,
    lending_market: AccountInfo<'info>,
    lending_market_authority: AccountInfo<'info>,
    token_program: Program<'info, Token>,
    flash_loan_receiver_program: AccountInfo<'info>,
}
