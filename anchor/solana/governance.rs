// This file is autogenerated with https://github.com/acheroncrypto/native-to-anchor

use anchor_lang::prelude::*;

declare_id!("11111111111111111111111111111111");

#[program]
pub mod governance {
    use super::*;

    pub fn create_realm(
        ctx: Context<CreateRealm>,
        name: String,
        config_args: RealmConfigArgs,
    ) -> Result<()> {
        Ok(())
    }

    pub fn deposit_governing_tokens(
        ctx: Context<DepositGoverningTokens>,
        amount: u64,
    ) -> Result<()> {
        Ok(())
    }

    pub fn withdraw_governing_tokens(ctx: Context<WithdrawGoverningTokens>) -> Result<()> {
        Ok(())
    }

    pub fn set_governance_delegate(
        ctx: Context<SetGovernanceDelegate>,
        new_governance_delegate: Option<Pubkey>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_governance(
        ctx: Context<CreateGovernance>,
        config: GovernanceConfig,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_program_governance(
        ctx: Context<CreateProgramGovernance>,
        config: GovernanceConfig,
        transfer_upgrade_authority: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_proposal(
        ctx: Context<CreateProposal>,
        name: String,
        description_link: String,
        vote_type: VoteType,
        options: Vec<String>,
        use_deny_option: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn add_signatory(ctx: Context<AddSignatory>, signatory: Pubkey) -> Result<()> {
        Ok(())
    }

    pub fn remove_signatory(ctx: Context<RemoveSignatory>, signatory: Pubkey) -> Result<()> {
        Ok(())
    }

    pub fn insert_transaction(
        ctx: Context<InsertTransaction>,
        option_index: u8,
        index: u16,
        hold_up_time: u32,
        instructions: Vec<InstructionData>,
    ) -> Result<()> {
        Ok(())
    }

    pub fn remove_transaction(ctx: Context<RemoveTransaction>) -> Result<()> {
        Ok(())
    }

    pub fn cancel_proposal(ctx: Context<CancelProposal>) -> Result<()> {
        Ok(())
    }

    pub fn sign_off_proposal(ctx: Context<SignOffProposal>) -> Result<()> {
        Ok(())
    }

    pub fn cast_vote(ctx: Context<CastVote>, vote: Vote) -> Result<()> {
        Ok(())
    }

    pub fn finalize_vote(ctx: Context<FinalizeVote>) -> Result<()> {
        Ok(())
    }

    pub fn relinquish_vote(ctx: Context<RelinquishVote>) -> Result<()> {
        Ok(())
    }

    pub fn execute_transaction(ctx: Context<ExecuteTransaction>) -> Result<()> {
        Ok(())
    }

    pub fn create_mint_governance(
        ctx: Context<CreateMintGovernance>,
        config: GovernanceConfig,
        transfer_mint_authorities: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_token_governance(
        ctx: Context<CreateTokenGovernance>,
        config: GovernanceConfig,
        transfer_account_authorities: bool,
    ) -> Result<()> {
        Ok(())
    }

    pub fn set_governance_config(
        ctx: Context<SetGovernanceConfig>,
        config: GovernanceConfig,
    ) -> Result<()> {
        Ok(())
    }

    pub fn flag_transaction_error(ctx: Context<FlagTransactionError>) -> Result<()> {
        Ok(())
    }

    pub fn set_realm_authority(
        ctx: Context<SetRealmAuthority>,
        action: SetRealmAuthorityAction,
    ) -> Result<()> {
        Ok(())
    }

    pub fn set_realm_config(
        ctx: Context<SetRealmConfig>,
        config_args: RealmConfigArgs,
    ) -> Result<()> {
        Ok(())
    }

    pub fn create_token_owner_record(ctx: Context<CreateTokenOwnerRecord>) -> Result<()> {
        Ok(())
    }

    pub fn update_program_metadata(ctx: Context<UpdateProgramMetadata>) -> Result<()> {
        Ok(())
    }

    pub fn create_native_treasury(ctx: Context<CreateNativeTreasury>) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct CreateRealm<'info> {
    #[account(mut)]
    realm_address: AccountInfo<'info>,
    realm_authority: AccountInfo<'info>,
    community_token_mint: AccountInfo<'info>,
    #[account(mut)]
    community_token_holding_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
    token_program: Program<'info, Token>,
    rent: Sysvar<'info, Rent>,
    //council_token_mint: AccountInfo<'info>,
    //council_token_holding_address: AccountInfo<'info>,
    //community_voter_weight_addin: AccountInfo<'info>,
    //max_community_voter_weight_addin: AccountInfo<'info>,
    //#[account(mut)]
    //realm_config_address: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct DepositGoverningTokens<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    governing_token_holding_address: AccountInfo<'info>,
    #[account(mut)]
    governing_token_source: AccountInfo<'info>,
    governing_token_owner: Signer<'info>,
    governing_token_transfer_authority: Signer<'info>,
    #[account(mut)]
    token_owner_record_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct WithdrawGoverningTokens<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    governing_token_holding_address: AccountInfo<'info>,
    #[account(mut)]
    governing_token_destination: AccountInfo<'info>,
    governing_token_owner: Signer<'info>,
    #[account(mut)]
    token_owner_record_address: AccountInfo<'info>,
    token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct SetGovernanceDelegate<'info> {
    governance_authority: Signer<'info>,
    #[account(mut)]
    vote_record_address: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CreateGovernance<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    governance_address: AccountInfo<'info>,
    governed_account_address: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
    create_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateProgramGovernance<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    program_governance_address: AccountInfo<'info>,
    governed_program: AccountInfo<'info>,
    #[account(mut)]
    governed_program_data_address: AccountInfo<'info>,
    governed_program_upgrade_authority: Signer<'info>,
    token_owner_record: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    bpf_loader_upgradeable: AccountInfo<'info>,
    system_program: Program<'info, System>,
    create_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateProposal<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    proposal_address: AccountInfo<'info>,
    #[account(mut)]
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal_owner_record: AccountInfo<'info>,
    governing_token_mint: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct AddSignatory<'info> {
    #[account(mut)]
    proposal: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    signatory_record_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct RemoveSignatory<'info> {
    #[account(mut)]
    proposal: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    signatory_record_address: AccountInfo<'info>,
    #[account(mut)]
    beneficiary: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct InsertTransaction<'info> {
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    proposal_transaction_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
    rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct RemoveTransaction<'info> {
    #[account(mut)]
    proposal: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    proposal_transaction: AccountInfo<'info>,
    #[account(mut)]
    beneficiary: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CancelProposal<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    #[account(mut)]
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    #[account(mut)]
    proposal_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct SignOffProposal<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    #[account(mut)]
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    signatory: Signer<'info>,
    //proposal_owner_record: AccountInfo<'info>,
    //#[account(mut)]
    //signatory_record_address: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CastVote<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    #[account(mut)]
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    #[account(mut)]
    proposal_owner_record: AccountInfo<'info>,
    #[account(mut)]
    voter_token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    vote_record_address: AccountInfo<'info>,
    vote_governing_token_mint: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct FinalizeVote<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    #[account(mut)]
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    #[account(mut)]
    proposal_owner_record: AccountInfo<'info>,
    governing_token_mint: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct RelinquishVote<'info> {
    realm: AccountInfo<'info>,
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    #[account(mut)]
    token_owner_record: AccountInfo<'info>,
    #[account(mut)]
    vote_record_address: AccountInfo<'info>,
    vote_governing_token_mint: AccountInfo<'info>,
    //governance_authority: AccountInfo<'info>,
    //#[account(mut)]
    //beneficiary: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct ExecuteTransaction<'info> {
    governance: AccountInfo<'info>,
    #[account(mut)]
    proposal: AccountInfo<'info>,
    #[account(mut)]
    proposal_transaction: AccountInfo<'info>,
    instruction_program: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct CreateMintGovernance<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    mint_governance_address: AccountInfo<'info>,
    #[account(mut)]
    governed_mint: AccountInfo<'info>,
    governed_mint_authority: Signer<'info>,
    token_owner_record: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    create_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateTokenGovernance<'info> {
    realm: AccountInfo<'info>,
    #[account(mut)]
    token_governance_address: AccountInfo<'info>,
    #[account(mut)]
    governed_token: AccountInfo<'info>,
    governed_token_owner: Signer<'info>,
    token_owner_record: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    token_program: Program<'info, Token>,
    system_program: Program<'info, System>,
    create_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct SetGovernanceConfig<'info> {
    #[account(mut)]
    governance: Signer<'info>,
}

#[derive(Accounts)]
pub struct FlagTransactionError<'info> {
    #[account(mut)]
    proposal: AccountInfo<'info>,
    token_owner_record: AccountInfo<'info>,
    governance_authority: Signer<'info>,
    #[account(mut)]
    proposal_transaction: AccountInfo<'info>,
}

#[derive(Accounts)]
pub struct SetRealmAuthority<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    realm_authority: Signer<'info>,
    //new_realm_authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct SetRealmConfig<'info> {
    #[account(mut)]
    realm: AccountInfo<'info>,
    realm_authority: Signer<'info>,
    //council_token_mint: AccountInfo<'info>,
    //council_token_holding_address: AccountInfo<'info>,
    //system_program: Program<'info, System>,
    //realm_config_address: AccountInfo<'info>,
    //community_voter_weight_addin: Signer<'info>,
    //max_community_voter_weight_addin: Signer<'info>,
    //#[account(mut)]
    //payer: Signer<'info>,
}

#[derive(Accounts)]
pub struct CreateTokenOwnerRecord<'info> {
    realm: AccountInfo<'info>,
    governing_token_owner: AccountInfo<'info>,
    #[account(mut)]
    token_owner_record_address: AccountInfo<'info>,
    governing_token_mint: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct UpdateProgramMetadata<'info> {
    #[account(mut)]
    program_metadata_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct CreateNativeTreasury<'info> {
    governance: AccountInfo<'info>,
    #[account(mut)]
    native_treasury_address: AccountInfo<'info>,
    #[account(mut)]
    payer: Signer<'info>,
    system_program: Program<'info, System>,
}
